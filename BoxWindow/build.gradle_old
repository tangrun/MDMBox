plugins {
    id 'java'
    id 'application'
    id "org.beryx.jlink" version "2.24.4"
    id "org.openjfx.javafxplugin" version "0.0.10"
    id "com.gluonhq.gluonfx-gradle-plugin" version "1.0.7"
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
}

group 'com.tangrun.mdm'
version '1.0-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url "https://maven.aliyun.com/repository/central"}
}

ext {
    junitVersion = '5.8.1'
    javaFXVersion = "17.0.0.1"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

// 获取当前系统平台
def platform
if (org.gradle.internal.os.OperatingSystem.current().windows) {
    platform = "win"
} else if (org.gradle.internal.os.OperatingSystem.current().linux) {
    platform = "linux"
} else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
    platform = "mac"
}

application {
    mainModule = 'com.tangrun.mdm'
    mainClass = 'com.tangrun.mdm.boxwindow.Launcher'

    applicationName = "JavaFXSample111"
    applicationDefaultJvmArgs = [
            // Java16的ZGC似乎有大幅度优化
            "-XX:+UseZGC",
            // 当遇到空指针异常时显示更详细的信息
            "-XX:+ShowCodeDetailsInExceptionMessages",
            "-Dsun.java2d.opengl=true",
            // 不添加此参数，打包成exe后，https协议的网络图片资源无法加载
            "-Dhttps.protocols=TLSv1.1,TLSv1.2"
    ]
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jlink {
    options.set(List.of("--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"))

    launcher {
        name = application.applicationName
        imageName.set(application.applicationName)
    }

    imageZip.set(project.file("${project.buildDir}/image-zip/JavaFXSample.zip"))

    jpackage {
        outputDir = "build-package"
        imageName = application.applicationName
        skipInstaller = false
        installerName = application.applicationName
        appVersion = version.toString()

        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            icon = "src/main/resources/application.ico"
            installerOptions += ["--win-dir-chooser", "--win-menu", "--win-shortcut", "--win-menu-group", application.applicationName]
        }
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            icon = "src/main/resources/application.icns"
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            icon = "src/main/resources/application.png"
            installerType = "deb"
            installerOptions += ["--linux-deb-maintainer", "icuxika@outlook.com", "--linux-menu-group", application.applicationName, "--linux-shortcut"]
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task printDependentJarsList {
    // 打印出项目所依赖的jar包路径集合并使用 ; 拼接
    // projectJarPath: 当前项目 gradle jar 制作出来的 jar
    // dependentJarsPath: 项目依赖的第三方 jar 集合
    // 使用：jpackage -p "${projectJarPath};${dependentJarsPath}"

    println("----------")
    println(configurations.getByName("runtimeClasspath").files.join(";"))
    println("----------")
}

task copyDependencies(type: Copy) {
    from(configurations.getByName("runtimeClasspath"))
    into("$buildDir/modules")
}

// 打包 -> EXE镜像（build/package/image）
task package2Image(type: Exec) {
    dependsOn("build", copyDependencies)

    def iconPath = "$projectDir/src/main/resources/application.ico"
    if (org.gradle.internal.os.OperatingSystem.current().windows) {
        iconPath = "$projectDir/src/main/resources/application.ico"
    } else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
        iconPath = "$projectDir/src/main/resources/application.icns"
    } else if (org.gradle.internal.os.OperatingSystem.current().linux) {
        iconPath = "$projectDir/src/main/resources/application.png"
    }

    commandLine("jpackage")
    args(
            "-n", application.applicationName,
            "-t", "app-image",
            "--java-options", application.applicationDefaultJvmArgs.join(" "),
            "-p", "$buildDir/modules" + File.pathSeparator + "$buildDir/libs",
            "-d", "$buildDir/package/image",
            "-m", "${application.mainModule.get()}/${application.mainClass.get()}",
            "--icon", "${iconPath}",
            "--app-version", "$version"
    )
}


dependencies {

//    implementation "org.openjfx:javafx-base:${javaFXVersion}:${platform}"
//    implementation "org.openjfx:javafx-controls:${javaFXVersion}:${platform}"
//    implementation "org.openjfx:javafx-graphics:${javaFXVersion}:${platform}"
//    implementation "org.openjfx:javafx-fxml:${javaFXVersion}:${platform}"
//    implementation "org.openjfx:javafx-swing:${javaFXVersion}:${platform}"
//    implementation "org.openjfx:javafx-media:${javaFXVersion}:${platform}"
//    implementation "org.openjfx:javafx-web:${javaFXVersion}:${platform}"

//    implementation('org.controlsfx:controlsfx:11.1.1')
//    implementation('org.kordamp.ikonli:ikonli-javafx:12.2.0')
//    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')
//    implementation project(path: ':Shell')
    implementation 'org.apache.commons:commons-exec:1.3'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    implementation 'com.alibaba.fastjson2:fastjson2:2.0.10'
    implementation 'com.google.guava:guava:31.1-jre'

//    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
//    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'

    implementation 'com.h2database:h2:2.1.214'
//    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'
//    implementation 'com.github.gwenn:sqlite-dialect:0.1.2'
    implementation ('org.springframework.boot:spring-boot-starter-data-jpa:2.7.2'){
        exclude module: 'spring-boot-starter-logging'
    }
    implementation 'org.springframework.boot:spring-boot-starter-log4j2:2.7.2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'junit:junit'
}

test {
    useJUnitPlatform()
}

jlinkZip {
    group = 'distribution'
}
